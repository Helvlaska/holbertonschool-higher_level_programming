# doctest: +SKIP
>>> MyList = __import__("1-my_list").MyList

# ðŸ§± 1. CrÃ©ation et hÃ©ritage
>>> my_list = MyList()
>>> isinstance(my_list, list)
True
>>> type(my_list).__name__
'MyList'

# ðŸ“Š 2. Contenu et comportement de base
>>> my_list.append(5)
>>> my_list.append(2)
>>> my_list.append(8)
>>> my_list.append(3)
>>> my_list
[5, 2, 8, 3]
>>> my_list.print_sorted()
[2, 3, 5, 8]
>>> my_list
[5, 2, 8, 3]

# ðŸ§ª 3. Cas limites

## Liste vide
>>> empty = MyList()
>>> empty.print_sorted()
[]

## Liste avec doublons
>>> doubles = MyList()
>>> doubles.extend([4, 2, 4, 1, 2])
>>> doubles.print_sorted()
[1, 2, 2, 4, 4]

## Liste dÃ©jÃ  triÃ©e
>>> sorted_list = MyList()
>>> sorted_list.extend([1, 2, 3, 4])
>>> sorted_list.print_sorted()
[1, 2, 3, 4]

## Liste triÃ©e Ã  l'envers
>>> reverse = MyList()
>>> reverse.extend([5, 4, 3, 2, 1])
>>> reverse.print_sorted()
[1, 2, 3, 4, 5]

# ðŸ”¥ 4. Cas spÃ©cial : un seul Ã©lÃ©ment
>>> only_element = MyList()
>>> only_element.append(42)
>>> only_element.print_sorted()
[42]

# ðŸš« Cas non prÃ©vu : Ã©lÃ©ments non-entiers
>>> mixed = MyList()
>>> mixed.extend([3, "a", 5])
>>> mixed.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'str' and 'int'
